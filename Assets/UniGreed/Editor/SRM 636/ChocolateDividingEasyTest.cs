using System;
using NUnit.Framework;

[TestFixture]
public class ChocolateDividingEasyTest
{
    [Test]
    public void Example0()
    {
        string[] chocolate = new string[] {
			"9768",
			"6767",
			"5313"
		};
        int __expected = 3;
        int __result = new ChocolateDividingEasy().findBest(chocolate);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example1()
    {
        string[] chocolate = new string[] {
			"36753562",
			"91270936",
			"06261879",
			"20237592",
			"28973612",
			"93194784"
		};
        int __expected = 15;
        int __result = new ChocolateDividingEasy().findBest(chocolate);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example2()
    {
        string[] chocolate = new string[] {
			"012",
			"345",
			"678"
		};
        int __expected = 0;
        int __result = new ChocolateDividingEasy().findBest(chocolate);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example30()
    {
        string[] chocolate = new string[]
        {
            "980423274569968676693007143953143105742320217296",
            "965268192590006347831363516236142890809178371905",
            "810066519265879278269198226338021047899037514451",
            "577416230084906022021925878246593556391401011833",
            "036140820964525090929081284568983708702919363894",
            "086207327804892184177678527016436256991791392722",
            "449128191894657475194485736108364496315616001941",
            "472010783315442891744208128232580701982435070461",
            "735477289034202485895248768724099758479592022482",
            "964488566358969055804954178626033683451287275290",
            "972370707589413973248468317036243572575445486974",
            "420288239954578046513067528217879019832027497391",
            "943461323166963064069461412141458914048584190698",
            "217183426650017818433391920291015733377962263966",
            "800351653672974479928614032438239464521908118767",
            "859740346601434572236348279077955821865626789348",
            "563317337554249924032816494528306958893541985100",
            "525906547992052849648204313023095786452372579975",
            "969789213717247717575832289386872762903477193896",
            "846349587615414711121761470989566310281244906499",
            "711087144232300943281307920569450558492937360684",
            "904357249227262449308791758716328773429541280456",
            "406498663636460260722688809074614453232795534672",
            "644034837734315952386557211890077770173078409104",
            "454222945234351240267784537447082526720265813137",
            "155044597251182536120367960474101706177013323598",
            "400448156215825117927748283552395541578119693315",
            "009994812387717283530342423856389278872000004922",
            "208452605202850990087200400094534382562284799980",
            "988929191393966696873213682703713606737866183044",
            "621143523993265647411129957451945259501920249723",
            "585897914750064691564956102095463145048433432013",
            "479887497628365991497230706127466644306098826515",
            "774419719344290957587106901564054697688713164251",
            "101843733011438820888650196733845129415018361265",
            "243031262065569181045746504943469084333559015945",
            "240746698202570771104479572386803007968789266235",
            "367914183311221521439218356179635328937290512787",
            "022265200810703457353292255743665881603605677122",
            "979291438922400911273634123037224445701513956967",
            "094457081385127764336608195792411878876934668437",
            "082643662233407784584309965728429713071497057747",
            "316948834339473364862033731405157953737490339886",
            "364787252314950845340009254432061659485618323320",
            "066086231876395450318002936461667485220317248704",
            "735847250016184825657800846616210016753854474177",
            "654546623204137330105483850389247891675925638381",
            "494134411669683365652144609747806419963029000556",
            "011548918184886758646168161146940314315345826491",
            "487013122456072024777201083855915846171318137461"
        };
        int __expected = 1129;
        int __result = new ChocolateDividingEasy().findBest(chocolate);
        Assert.AreEqual(__expected, __result);
    }
}
