using System;
using NUnit.Framework;

[TestFixture]
public class TaroCuttingTest
{
    [Test]
    public void Example0()
    {
        int[] height = new int[] {
			4,
			7
		};
        int[] add = new int[] {
			7,
			1
		};
        int[] device = new int[] {
			7
		};
        int time = 1;
        int __expected = 15;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example1()
    {
        int[] height = new int[] {
			3,
			1,
			2
		};
        int[] add = new int[] {
			1,
			1,
			1
		};
        int[] device = new int[] {
			7,
			7,
			7
		};
        int time = 2;
        int __expected = 12;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example2()
    {
        int[] height = new int[] {
			100,
			50
		};
        int[] add = new int[] {
			75,
			30
		};
        int[] device = new int[] {
			200,
			100,
			50
		};
        int time = 2;
        int __expected = 130;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example3()
    {
        int[] height = new int[] {
			7,
			10,
			1,
			7,
			5,
			4,
			11,
			5,
			7,
			9,
			10,
			8
		};
        int[] add = new int[] {
			1,
			3,
			4,
			10,
			2,
			1,
			6,
			4,
			8,
			7,
			5,
			10
		};
        int[] device = new int[] {
			7,
			1,
			5,
			10
		};
        int time = 3;
        int __expected = 96;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example4()
    {
        int[] height = new int[] {
			35,
			45,
			32,
			8
		};
        int[] add = new int[] {
			2,
			25,
			31,
			5
		};
        int[] device = new int[] {
			29,
			28,
			3,
			11,
			28,
			37
		};
        int time = 8;
        int __expected = 29;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }

    [Test]
    public void Example5()
    {
        int[] height = new int[] {
			614,
			649,
			977,
			808,
			821,
			356,
			801,
			493,
			669,
			650,
			652,
			627,
			129,
			261,
			883,
			513,
			62,
			698,
			83,
			772,
			779,
			719,
			83,
			105,
			774,
			867,
			412,
			892,
			142,
			851,
			743,
			66,
			221,
			494,
			125,
			905,
			638,
			342,
			723,
			680,
			407,
			197,
			111,
			368,
			676,
			694,
			765,
			482,
			712,
			188,
			325,
			535,
			6,
			49,
			655,
			595,
			958,
			805,
			659,
			893,
			370,
			904,
			276,
			156,
			29,
			458,
			757,
			632,
			731,
			289,
			582,
			207,
			843,
			365,
			387,
			521,
			69,
			269,
			459,
			428,
			423,
			885,
			744,
			199,
			998,
			968,
			296,
			473,
			50,
			752,
			492,
			919,
			473,
			981,
			380,
			896,
			769,
			991,
			269,
			93,
			108,
			184,
			762,
			312,
			511,
			256,
			374,
			600,
			643,
			445,
			908,
			250,
			384,
			518,
			119,
			464,
			499,
			124,
			82,
			999,
			881,
			767,
			177,
			796,
			2,
			620,
			759,
			380,
			901,
			221,
			407,
			622,
			260,
			622,
			729,
			264,
			768,
			79,
			236,
			524,
			437,
			215,
			108,
			518,
			820,
			725,
			490,
			796,
			986,
			318
		};
        int[] add = new int[] {
			391,
			938,
			772,
			630,
			54,
			775,
			379,
			613,
			647,
			8,
			946,
			885,
			604,
			822,
			663,
			559,
			452,
			565,
			637,
			695,
			24,
			515,
			92,
			956,
			194,
			551,
			813,
			362,
			190,
			268,
			440,
			781,
			450,
			789,
			566,
			372,
			402,
			860,
			531,
			608,
			434,
			761,
			754,
			26,
			504,
			873,
			132,
			756,
			206,
			93,
			284,
			807,
			642,
			637,
			936,
			954,
			205,
			303,
			582,
			822,
			134,
			269,
			967,
			147,
			589,
			549,
			24,
			670,
			403,
			105,
			40,
			531,
			486,
			695,
			898,
			287,
			443,
			542,
			599,
			151,
			45,
			567,
			548,
			945,
			912,
			764,
			451,
			404,
			700,
			522,
			227,
			954,
			84,
			347,
			625,
			278,
			377,
			730,
			635,
			604,
			959,
			845,
			41,
			193,
			459,
			532,
			429,
			216,
			473,
			415,
			85,
			933,
			90,
			643,
			94,
			927,
			692,
			99,
			771,
			594,
			318,
			627,
			89,
			340,
			110,
			488,
			909,
			253,
			20,
			114,
			179,
			177,
			116,
			42,
			676,
			91,
			787,
			437,
			551,
			51,
			880,
			336,
			759,
			795,
			243,
			727,
			279,
			620,
			488,
			607
		};
        int[] device = new int[] {
			942,
			79,
			387,
			184,
			104,
			981,
			766,
			678,
			715,
			998,
			161,
			125,
			439,
			532,
			550,
			415,
			4,
			467,
			211,
			852,
			781,
			577,
			728,
			592,
			40,
			971,
			852,
			592,
			338,
			555,
			662,
			636,
			823,
			122,
			728,
			69,
			701,
			476,
			346,
			190,
			36,
			535,
			826,
			739,
			517,
			551,
			257,
			36,
			906,
			171,
			629,
			292,
			49,
			29,
			109,
			151,
			299,
			180,
			193,
			731,
			655,
			877,
			174,
			688,
			866,
			957,
			57,
			89,
			513,
			765,
			68,
			245,
			454,
			968,
			224,
			417,
			657,
			383,
			769,
			809,
			13,
			51,
			813,
			970,
			632,
			357,
			787,
			717,
			254,
			645,
			352,
			636,
			370,
			950,
			917,
			959,
			364,
			453,
			890,
			43,
			98,
			438,
			748,
			277,
			115,
			298,
			431,
			709,
			312,
			49,
			553,
			395,
			798,
			58,
			419,
			355,
			770,
			818,
			460,
			89,
			880,
			515,
			952,
			219,
			608,
			284,
			532,
			254,
			361,
			524,
			199,
			265,
			407,
			782,
			737,
			928,
			977,
			729,
			510,
			175,
			609,
			81,
			155,
			24,
			425,
			186,
			999,
			839,
			896,
			721
		};
        int time = 150;
        int __expected = 43325;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }

    [Test, MaxTime(2000)]
    public void Sample65()
    {
        int[] height = new int[]
        {
            654,
            267,
            901,
            552,
            469,
            965,
            94,
            766,
            484,
            886,
            628,
            108,
            176,
            406,
            450,
            374,
            692,
            460,
            713,
            190,
            456,
            763,
            874,
            615,
            496,
            186,
            689,
            691,
            731,
            242,
            768,
            671,
            471,
            412,
            882,
            538,
            235,
            506,
            139,
            119,
            775,
            893,
            403,
            152,
            238,
            575,
            434,
            682,
            530,
            494,
            777,
            424,
            420,
            345,
            492,
            596,
            41,
            735,
            826,
            501,
            674,
            877,
            72,
            825,
            864,
            403,
            225,
            237,
            844,
            369,
            108,
            233,
            849,
            167,
            372,
            972,
            163,
            501,
            866,
            243,
            199,
            517,
            825,
            836,
            790,
            698,
            456,
            381,
            441,
            694,
            446,
            779,
            173,
            326,
            975,
            47,
            184,
            49,
            96,
            956,
            873,
            896,
            311,
            143,
            939,
            292,
            325,
            692,
            797,
            902,
            851,
            138,
            873,
            530,
            262,
            360,
            607,
            333,
            654,
            874,
            35,
            234,
            449,
            719,
            892,
            738,
            464,
            723,
            339,
            851,
            900,
            761,
            787,
            860,
            921,
            387,
            119,
            161,
            572,
            214,
            427,
            793,
            958,
            873,
            221,
            849,
            767,
            370,
            734,
            949
        };
        int[] add = new int[]
        {
            9,
            0,
            4,
            8,
            3,
            9,
            9,
            4,
            1,
            8,
            3,
            3,
            7,
            6,
            0,
            1,
            7,
            0,
            1,
            4,
            8,
            7,
            2,
            0,
            8,
            3,
            6,
            3,
            0,
            8,
            5,
            8,
            8,
            3,
            1,
            3,
            1,
            2,
            2,
            0,
            5,
            7,
            8,
            2,
            9,
            9,
            9,
            1,
            9,
            5,
            4,
            8,
            3,
            7,
            8,
            2,
            9,
            6,
            6,
            5,
            5,
            6,
            2,
            1,
            4,
            3,
            3,
            5,
            0,
            8,
            4,
            2,
            4,
            2,
            1,
            4,
            1,
            4,
            7,
            8,
            6,
            8,
            6,
            6,
            8,
            5,
            7,
            9,
            7,
            8,
            9,
            1,
            2,
            8,
            8,
            9,
            8,
            6,
            5,
            4,
            8,
            0,
            6,
            9,
            0,
            5,
            7,
            3,
            2,
            5,
            4,
            1,
            3,
            7,
            7,
            3,
            0,
            2,
            6,
            7,
            1,
            3,
            1,
            3,
            5,
            8,
            7,
            5,
            8,
            6,
            0,
            5,
            6,
            7,
            8,
            3,
            7,
            8,
            1,
            4,
            2,
            9,
            4,
            4,
            0,
            0,
            2,
            8,
            2,
            0
        };
        int[] device = new int[]
        {
            573,
            124,
            268,
            1411,
            359,
            1458,
            390,
            696,
            905,
            623,
            672,
            553,
            1042,
            690,
            1309,
            1353,
            1296,
            241,
            112,
            619,
            1203,
            898,
            435,
            1132,
            482,
            748,
            1470,
            839,
            335,
            204,
            732,
            233,
            526,
            1027,
            763,
            1226,
            1383,
            1056,
            199,
            1137,
            51,
            819,
            563,
            1233,
            1355,
            1016,
            1246,
            1124,
            754,
            1406,
            435,
            1234,
            73,
            1326,
            746,
            1053,
            910,
            1387,
            869,
            645,
            840,
            960,
            156,
            1198,
            979,
            510,
            734,
            82,
            627,
            848,
            1434,
            903,
            1216,
            165,
            916,
            1318,
            342,
            166,
            1211,
            17,
            581,
            379,
            320,
            1409,
            479,
            611,
            149,
            937,
            332,
            348,
            1036,
            1481,
            480,
            300,
            1287,
            1190,
            759,
            1149,
            464,
            568
        };
        int time = 150;

        int __expected = 13946;
        int __result = new TaroCutting().getNumber(height, add, device, time);
        Assert.AreEqual(__expected, __result);
    }
}
