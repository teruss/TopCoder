using UnityEngine;
using System.Collections;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

public class ${Problem.Name}Test : MonoBehaviour
{
    List<${Method.ReturnType}> expectedList = new List<${Method.ReturnType}>();
    List<${Method.ReturnType}> resultList = new List<${Method.ReturnType}>();

    void RunTestcase(int __case)
    {
        switch (__case)
        {
${<foreach Examples e}
            case ${e.Num}:
                {
${<foreach e.Input in}
${<if !in.Param.Type.Array}
                    ${in.Param.Type.Primitive} ${in.Param.Name} = ${in};
${<else}
                    ${in.Param.Type.Primitive}[] ${in.Param.Name} = new ${in.Param.Type} {${foreach in.ValueList v ,}
		    				 ${v}${end}
						 };
${<end}
${<end}
${<if !e.Output.Param.Type.Array}
				${e.Output.Param.Type.Primitive} __expected = ${e.Output};
${<else}
				${e.Output.Param.Type.Primitive}[] __expected = new ${e.Output.Param.Type} {${foreach e.Output.ValueList v ,}
					${v}${end}
				};
${<end}
				expectedList.Add(__expected);
				resultList.Add(DoTest(${foreach e.Input in , }${in.Param.Name}${end}, __expected, __case));
				break;
			}
${<end}
			default: break;
		}
    }

    ${Method.ReturnType} DoTest(${Method.Params}, ${Method.ReturnType} __expected, int caseNo)
    {
        DateTime startTime = DateTime.Now;
        ${ClassName} instance = new ${ClassName}();
        ${Method.ReturnType} __result = instance.${Method.Name}(${foreach Method.Params par , }${par.Name}${end});
        TimeSpan __elapsed = new TimeSpan(DateTime.Now.Ticks - startTime.Ticks);

        nAll++;
        Console.Error.Write(string.Format("  Testcase #{0} ... ", caseNo));

        if (${if Method.ReturnType.Array}Equals(__result, __expected)${else}${if Method.ReturnType.RealNumber}DoubleEquals(__expected, __result)${else}__result == __expected${end}${end})
        {
            Console.Error.WriteLine("PASSED! " + string.Format("({0:0.00} seconds)", __elapsed.TotalSeconds));
            nPassed++;
        } else
        {
            Console.Error.WriteLine("FAILED! " + string.Format("({0:0.00} seconds)", __elapsed.TotalSeconds));
        }
        return __result;
    }

    static int nExample = ${NumOfExamples};
    static int nAll = 0, nPassed = 0;

${<if Method.ReturnType.RealNumber}
	static bool DoubleEquals(double a, double b) {
		return !Double.IsNaN(a) && !Double.IsNaN(b) && Math.Abs(b - a) <= 1e-9 * Math.Max(1.0, Math.Abs(a));
	}

${<end}
${<if ReturnsArray}
	static bool Equals(${Method.ReturnType} a, ${Method.ReturnType} b) {
		if (a.Length != b.Length) return false;
		for (int i = 0; i < a.Length; ++i) if (${if Method.ReturnType.string}a[i] == null || b[i] == null || a[i] != b[i]${else}${if Method.ReturnType.RealNumber}!DoubleEquals(a[i], b[i])${else}a[i] != b[i]${end}${end}) return false;
		return true;
	}

	static string ToString(${Method.ReturnType} arr) {
		StringBuilder sb = new StringBuilder();
		sb.Append("[ ");
		for (int i = 0; i < arr.Length; ++i) {
			if (i > 0) sb.Append(", ");
			sb.Append(arr[i]);
		}
		return sb.ToString() + " ]";
	}
${<end}

    void Start()
    {
        for (int i = 0; i < nExample; ++i)
            RunTestcase(i);
    }

    void OnGUI()
    {
        GUILayout.Label("${Problem.Name} (${Problem.Score} Points)");
        GUILayout.Label("");

        for (int caseNo = 0; caseNo < nExample; ++caseNo)
        {
            string resultString = string.Format("  Testcase #{0} ... ", caseNo);
            
            if (${if Method.ReturnType.Array}Equals(resultList[caseNo], expectedList[caseNo])${else}${if Method.ReturnType.RealNumber}DoubleEquals(expectedList[caseNo], resultList[caseNo])${else}resultList[caseNo] == expectedList[caseNo]${end}${end})
            {
                GUILayout.Label(resultString + "PASSED!");
            } else
            {
                GUILayout.Label(resultString + "FAILED!");
                GUILayout.Label("           Expected: " + ${if Method.ReturnType.Array}ToString(expectedList[caseNo])${else}${if Method.ReturnType.String}"\\"" + expectedList[caseNo] + "\\""${else}expectedList[caseNo]${end}${end});
                GUILayout.Label("           Received: " + ${if Method.ReturnType.Array}ToString(resultList[caseNo])${else}${if Method.ReturnType.String}"\\"" + resultList[caseNo] + "\\""${else}resultList[caseNo]${end}${end});
            }

        }
        GUILayout.Label("");
        GUILayout.Label(string.Format("Passed : {0}/{1} cases", nPassed, nAll));
        
        DateTime Jan1st1970 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        int T = (int)((DateTime.UtcNow - Jan1st1970).TotalSeconds - ${CreateTime});
        double PT = T / 60.0, TT = 75.0;
        GUILayout.Label(string.Format("Time   : {0} minutes {1} secs", T / 60, T % 60));
        GUILayout.Label(string.Format("Score  : {0:0.00} points", 250 * (0.3 + (0.7 * TT * TT) / (10.0 * PT * PT + TT * TT))));
    }
}
